{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bump:major": {
      "name": "bump:major",
      "description": "Bump major version, commit, tag, and push",
      "steps": [
        {
          "exec": "pnpm version major -m \"chore: release %s\""
        },
        {
          "exec": "git push --follow-tags --no-verify"
        }
      ]
    },
    "bump:minor": {
      "name": "bump:minor",
      "description": "Bump minor version, commit, tag, and push",
      "steps": [
        {
          "exec": "pnpm version minor -m \"chore: release %s\""
        },
        {
          "exec": "git push --follow-tags --no-verify"
        }
      ]
    },
    "bump:patch": {
      "name": "bump:patch",
      "description": "Bump patch version, commit, tag, and push",
      "steps": [
        {
          "exec": "pnpm version patch -m \"chore: release %s\""
        },
        {
          "exec": "git push --follow-tags --no-verify"
        }
      ]
    },
    "bump:pre-major": {
      "name": "bump:pre-major",
      "description": "Bump pre-major version (rc), commit, tag, and push",
      "steps": [
        {
          "exec": "pnpm version premajor --preid=rc -m \"chore: release %s\""
        },
        {
          "exec": "git push --follow-tags --no-verify"
        }
      ]
    },
    "bump:pre-minor": {
      "name": "bump:pre-minor",
      "description": "Bump pre-minor version (rc), commit, tag, and push",
      "steps": [
        {
          "exec": "pnpm version preminor --preid=rc -m \"chore: release %s\""
        },
        {
          "exec": "git push --follow-tags --no-verify"
        }
      ]
    },
    "bump:pre-patch": {
      "name": "bump:pre-patch",
      "description": "Bump pre-patch version (rc), commit, tag, and push",
      "steps": [
        {
          "exec": "pnpm version prepatch --preid=rc -m \"chore: release %s\""
        },
        {
          "exec": "git push --follow-tags --no-verify"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "tsc --build"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "tsx .projenrc.ts"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "pnpm i --no-frozen-lockfile"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "pnpm install",
          "condition": "test -n \"$GITHUB_COPILOT_API_TOKEN\""
        },
        {
          "exec": "pnpm install --frozen-lockfile",
          "condition": "test -z \"$GITHUB_COPILOT_API_TOKEN\""
        }
      ]
    },
    "lint": {
      "name": "lint",
      "description": "Runs prettier eslint against the codebase",
      "steps": [
        {
          "exec": "prettier --write --no-error-on-unmatched-pattern **/*.{ts,tsx} --ignore-path .gitignore",
          "receiveArgs": true
        },
        {
          "exec": "eslint . --ext .ts,tsx -c ./eslint.config.mjs --fix --no-error-on-unmatched-pattern",
          "receiveArgs": true
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "mkdir -p dist/js"
        },
        {
          "exec": "pnpm pack --pack-destination dist/js"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation"
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation",
      "steps": [
        {
          "exec": "rimraf build"
        }
      ]
    },
    "publish:official": {
      "name": "publish:official",
      "description": "Build and publish official version with latest tag",
      "steps": [
        {
          "spawn": "build"
        },
        {
          "exec": "pnpm publish --tag latest --access private --no-git-checks"
        }
      ]
    },
    "publish:rc": {
      "name": "publish:rc",
      "description": "Build and publish RC version with rc tag",
      "steps": [
        {
          "spawn": "build"
        },
        {
          "exec": "pnpm publish --tag rc --access private --no-git-checks"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "spawn": "lint",
          "receiveArgs": true
        },
        {
          "exec": "vitest run --coverage --pass-with-no-tests",
          "receiveArgs": true
        }
      ]
    },
    "test:update-snapshots": {
      "name": "test:update-snapshots",
      "description": "run tests and update snapshots",
      "steps": [
        {
          "exec": "vitest run ---u",
          "receiveArgs": true
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "run tests in watch mode",
      "steps": [
        {
          "exec": "vitest",
          "receiveArgs": true
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "pnpm dlx npm-check-updates@16 --upgrade --target=minor --peer --no-deprecated --dep=dev,peer,prod,optional --filter=@eslint/js,@stylistic/eslint-plugin,@vitest/coverage-v8,eslint,eslint-import-resolver-typescript,eslint-plugin-functional,eslint-plugin-import,eslint-plugin-perfectionist,prettier,rimraf,ts-deepmerge,tsx,typescript,typescript-eslint,vitest"
        },
        {
          "exec": "pnpm i --no-frozen-lockfile"
        },
        {
          "exec": "pnpm update @calm/ctt @eslint/js @stylistic/eslint-plugin @types/node @vitest/coverage-v8 eslint eslint-import-resolver-typescript eslint-plugin-functional eslint-plugin-import eslint-plugin-perfectionist prettier rimraf ts-deepmerge tsx typescript typescript-eslint vitest"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "tsc --build -w"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(pnpm -c exec \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
