// ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
import eslint from '@eslint/js';
import stylistic from '@stylistic/eslint-plugin';
import perfectionist from 'eslint-plugin-perfectionist';
import functional from 'eslint-plugin-functional';
import importPlugin from 'eslint-plugin-import';
import { globalIgnores } from 'eslint/config';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  eslint.configs.recommended,
  importPlugin.flatConfigs.recommended,
  importPlugin.flatConfigs.typescript,
  tseslint.configs.strictTypeChecked,
  perfectionist.configs['recommended-alphabetical'],
  stylistic.configs.recommended,
  functional.configs.off,
  {
    languageOptions: {
      parser: tseslint.parser,
      parserOptions: {
        projectService: true,
      },
    },
    rules: {
      '@stylistic/arrow-parens': ['error', 'as-needed'],
      '@stylistic/brace-style': 'off',
      '@stylistic/indent': 'off',
      '@stylistic/indent-binary-ops': 'off',
      '@stylistic/member-delimiter-style': [
        'error',
        {
          multiline: {
            delimiter: 'semi',
            requireLast: true,
          },
          singleline: {
            delimiter: 'semi',
            requireLast: false,
          },
        },
      ],
      '@stylistic/operator-linebreak': 'off',
      '@stylistic/quote-props': ['error', 'as-needed'],
      '@stylistic/quotes': 'off',
      '@stylistic/semi': ['error', 'always'],
      '@typescript-eslint/no-unnecessary-template-expression': 'error',
      '@typescript-eslint/no-unused-vars': [
        'error',
        {
          args: 'all',
          argsIgnorePattern: '^_',
          caughtErrors: 'all',
          caughtErrorsIgnorePattern: '^_',
          destructuredArrayIgnorePattern: '^_',
          varsIgnorePattern: '^_',
          ignoreRestSiblings: true,
        },
      ],
      '@typescript-eslint/restrict-template-expressions': [
        'error',
        {
          allowNumber: true,
          allowBoolean: true,
          allowNullish: true,
          allowNever: true,
        },
      ],
      'functional/no-let': ['error'],
      'functional/immutable-data': [
        'error',
        { ignoreMapsAndSets: true, ignoreClasses: 'fieldsOnly' },
      ],
      'import/export': 'off',
      'import/no-unresolved': [
        'error',
        {
          ignore: ['aws-lambda', 'vitest/config'],
        },
      ],
      'no-else-return': 'error',
      'no-lonely-if': 'error',
      'no-nested-ternary': 'error',
      'no-template-curly-in-string': 'error',
      'object-shorthand': ['error', 'always'],
      'prefer-template': 'error',
    },
  },
  {
    files: ['**/*.test.ts', '**/*.int-test.ts'],
    rules: {
      '@typescript-eslint/require-await': 'off',
    },
  },
  globalIgnores(['**/build/*', 'eslint.config.mjs']),
);
